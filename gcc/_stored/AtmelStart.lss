
AtmelStart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000270  00002000  00002000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  00002270  2**0
                  CONTENTS
  2 .bss          0000001c  20000000  20000000  00010000  2**2
                  ALLOC
  3 .stack        00002004  2000001c  2000001c  00010000  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00002270  2**0
                  CONTENTS, READONLY
  5 .comment      0000007f  00000000  00000000  00002298  2**0
                  CONTENTS, READONLY
  6 .debug_info   00003f5f  00000000  00000000  00002317  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004b0  00000000  00000000  00006276  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000002b  00000000  00000000  00006726  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000070  00000000  00000000  00006751  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  000067c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00000cfa  00000000  00000000  00006801  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000014f3  00000000  00000000  000074fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006f431  00000000  00000000  000089ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000000c0  00000000  00000000  00077e20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <exception_table>:
    2000:	20 20 00 20 01 21 00 00 fd 20 00 00 fd 20 00 00       . .!... ... ..
	...
    202c:	fd 20 00 00 00 00 00 00 00 00 00 00 fd 20 00 00     . ........... ..
    203c:	fd 20 00 00 fd 20 00 00 fd 20 00 00 fd 20 00 00     . ... ... ... ..
    204c:	fd 20 00 00 fd 20 00 00 fd 20 00 00 fd 20 00 00     . ... ... ... ..
    205c:	fd 20 00 00 fd 20 00 00 fd 20 00 00 fd 20 00 00     . ... ... ... ..
    206c:	fd 20 00 00 fd 20 00 00 fd 20 00 00 fd 20 00 00     . ... ... ... ..
    207c:	fd 20 00 00 fd 20 00 00 fd 20 00 00 fd 20 00 00     . ... ... ... ..
    208c:	fd 20 00 00 fd 20 00 00 00 00 00 00 00 00 00 00     . ... ..........
    209c:	fd 20 00 00 fd 20 00 00 fd 20 00 00 fd 20 00 00     . ... ... ... ..
    20ac:	fd 20 00 00 00 00 00 00                             . ......

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	20000000 	.word	0x20000000
    20d4:	00000000 	.word	0x00000000
    20d8:	00002270 	.word	0x00002270

000020dc <frame_dummy>:
    20dc:	4b04      	ldr	r3, [pc, #16]	; (20f0 <frame_dummy+0x14>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4903      	ldr	r1, [pc, #12]	; (20f4 <frame_dummy+0x18>)
    20e6:	4804      	ldr	r0, [pc, #16]	; (20f8 <frame_dummy+0x1c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	bd10      	pop	{r4, pc}
    20ee:	46c0      	nop			; (mov r8, r8)
    20f0:	00000000 	.word	0x00000000
    20f4:	20000004 	.word	0x20000004
    20f8:	00002270 	.word	0x00002270

000020fc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    20fc:	e7fe      	b.n	20fc <Dummy_Handler>
	...

00002100 <Reset_Handler>:
	if (pSrc != pDest) {
    2100:	4821      	ldr	r0, [pc, #132]	; (2188 <Reset_Handler+0x88>)
    2102:	4922      	ldr	r1, [pc, #136]	; (218c <Reset_Handler+0x8c>)
{
    2104:	b570      	push	{r4, r5, r6, lr}
    2106:	2300      	movs	r3, #0
	if (pSrc != pDest) {
    2108:	4288      	cmp	r0, r1
    210a:	d135      	bne.n	2178 <Reset_Handler+0x78>
		*pDest++ = 0;
    210c:	2100      	movs	r1, #0
    210e:	4b20      	ldr	r3, [pc, #128]	; (2190 <Reset_Handler+0x90>)
	for (pDest = &_szero; pDest < &_ezero;) {
    2110:	4a20      	ldr	r2, [pc, #128]	; (2194 <Reset_Handler+0x94>)
    2112:	4293      	cmp	r3, r2
    2114:	d335      	bcc.n	2182 <Reset_Handler+0x82>
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
    2116:	22ff      	movs	r2, #255	; 0xff
    2118:	4b1f      	ldr	r3, [pc, #124]	; (2198 <Reset_Handler+0x98>)
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    211a:	2103      	movs	r1, #3
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
    211c:	4393      	bics	r3, r2
    211e:	4a1f      	ldr	r2, [pc, #124]	; (219c <Reset_Handler+0x9c>)
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2120:	250c      	movs	r5, #12
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
    2122:	6093      	str	r3, [r2, #8]
	SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2124:	2202      	movs	r2, #2
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2126:	2408      	movs	r4, #8
	DMAC->QOSCTRL.bit.DQOS   = 2;
    2128:	2630      	movs	r6, #48	; 0x30
	SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    212a:	4b1d      	ldr	r3, [pc, #116]	; (21a0 <Reset_Handler+0xa0>)
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    212c:	481d      	ldr	r0, [pc, #116]	; (21a4 <Reset_Handler+0xa4>)
	SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    212e:	625a      	str	r2, [r3, #36]	; 0x24
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2130:	78c3      	ldrb	r3, [r0, #3]
    2132:	438b      	bics	r3, r1
    2134:	4313      	orrs	r3, r2
    2136:	70c3      	strb	r3, [r0, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2138:	78c3      	ldrb	r3, [r0, #3]
    213a:	43ab      	bics	r3, r5
    213c:	4323      	orrs	r3, r4
    213e:	70c3      	strb	r3, [r0, #3]
	DMAC->QOSCTRL.bit.DQOS   = 2;
    2140:	4b19      	ldr	r3, [pc, #100]	; (21a8 <Reset_Handler+0xa8>)
    2142:	7b98      	ldrb	r0, [r3, #14]
    2144:	43b0      	bics	r0, r6
    2146:	0006      	movs	r6, r0
    2148:	2020      	movs	r0, #32
    214a:	4330      	orrs	r0, r6
    214c:	7398      	strb	r0, [r3, #14]
	DMAC->QOSCTRL.bit.FQOS   = 2;
    214e:	7b98      	ldrb	r0, [r3, #14]
    2150:	43a8      	bics	r0, r5
    2152:	4304      	orrs	r4, r0
    2154:	739c      	strb	r4, [r3, #14]
	DMAC->QOSCTRL.bit.WRBQOS = 2;
    2156:	7b98      	ldrb	r0, [r3, #14]
    2158:	4388      	bics	r0, r1
    215a:	4302      	orrs	r2, r0
    215c:	739a      	strb	r2, [r3, #14]
	NVMCTRL->CTRLB.bit.MANW = 1;
    215e:	2380      	movs	r3, #128	; 0x80
    2160:	4a12      	ldr	r2, [pc, #72]	; (21ac <Reset_Handler+0xac>)
    2162:	6851      	ldr	r1, [r2, #4]
    2164:	430b      	orrs	r3, r1
    2166:	6053      	str	r3, [r2, #4]
	__libc_init_array();
    2168:	4b11      	ldr	r3, [pc, #68]	; (21b0 <Reset_Handler+0xb0>)
    216a:	4798      	blx	r3
	main();
    216c:	4b11      	ldr	r3, [pc, #68]	; (21b4 <Reset_Handler+0xb4>)
    216e:	4798      	blx	r3
    2170:	e7fe      	b.n	2170 <Reset_Handler+0x70>
			*pDest++ = *pSrc++;
    2172:	58c4      	ldr	r4, [r0, r3]
    2174:	3304      	adds	r3, #4
    2176:	6014      	str	r4, [r2, #0]
		for (; pDest < &_erelocate;) {
    2178:	4c0f      	ldr	r4, [pc, #60]	; (21b8 <Reset_Handler+0xb8>)
    217a:	18ca      	adds	r2, r1, r3
    217c:	42a2      	cmp	r2, r4
    217e:	d3f8      	bcc.n	2172 <Reset_Handler+0x72>
    2180:	e7c4      	b.n	210c <Reset_Handler+0xc>
		*pDest++ = 0;
    2182:	c302      	stmia	r3!, {r1}
    2184:	e7c5      	b.n	2112 <Reset_Handler+0x12>
    2186:	46c0      	nop			; (mov r8, r8)
    2188:	00002270 	.word	0x00002270
    218c:	20000000 	.word	0x20000000
    2190:	20000000 	.word	0x20000000
    2194:	2000001c 	.word	0x2000001c
    2198:	00002000 	.word	0x00002000
    219c:	e000ed00 	.word	0xe000ed00
    21a0:	410070fc 	.word	0x410070fc
    21a4:	41005000 	.word	0x41005000
    21a8:	41004800 	.word	0x41004800
    21ac:	41004000 	.word	0x41004000
    21b0:	00002209 	.word	0x00002209
    21b4:	000021f5 	.word	0x000021f5
    21b8:	20000000 	.word	0x20000000

000021bc <pins_setup>:
// Sun Aug 12 12:34:02 UTC 2018
#include "atmel_start.h"
#include "pins.h"

void pins_setup(void) {
    PORT->Group[PORTA].DIRSET.reg  = (uint32_t)(1 << 16); // PA16 //  1 11 pinmode   // D11
    21bc:	2180      	movs	r1, #128	; 0x80
    PORT->Group[PORTA].DIRSET.reg  = (uint32_t)(1 << 17); // PA17 //  1 13 pinmode   // D13
    21be:	2280      	movs	r2, #128	; 0x80
    PORT->Group[PORTA].DIRSET.reg  = (uint32_t)(1 << 16); // PA16 //  1 11 pinmode   // D11
    21c0:	4b07      	ldr	r3, [pc, #28]	; (21e0 <pins_setup+0x24>)
    21c2:	0249      	lsls	r1, r1, #9
    PORT->Group[PORTA].DIRSET.reg  = (uint32_t)(1 << 17); // PA17 //  1 13 pinmode   // D13
    21c4:	0292      	lsls	r2, r2, #10
    PORT->Group[PORTA].DIRSET.reg  = (uint32_t)(1 << 16); // PA16 //  1 11 pinmode   // D11
    21c6:	6099      	str	r1, [r3, #8]
    PORT->Group[PORTA].DIRSET.reg  = (uint32_t)(1 << 17); // PA17 //  1 13 pinmode   // D13
    21c8:	609a      	str	r2, [r3, #8]

    PORT->Group[PORTA].OUTTGL.reg  = (uint32_t)(1 << 16); // PA16 //    11 pintoggle // D11
    21ca:	61d9      	str	r1, [r3, #28]
    PORT->Group[PORTA].OUTTGL.reg  = (uint32_t)(1 << 17); // PA17 //    13 pintoggle // D13
    21cc:	61da      	str	r2, [r3, #28]

    PORT->Group[PORTA].OUTSET.reg |= (uint32_t)(1 << 16); // PA16 //  1 11 pinwrite  // D11
    21ce:	6998      	ldr	r0, [r3, #24]
    21d0:	4308      	orrs	r0, r1
    21d2:	6198      	str	r0, [r3, #24]
    PORT->Group[PORTA].OUTSET.reg |= (uint32_t)(1 << 17); // PA17 //  1 13 pinwrite  // D13
    21d4:	6998      	ldr	r0, [r3, #24]
    21d6:	4310      	orrs	r0, r2
    21d8:	6198      	str	r0, [r3, #24]

    PORT->Group[PORTA].OUTCLR.reg  = (uint32_t)(1 << 16); // PA16 //  0 11 pinwrite  // D11
    21da:	6159      	str	r1, [r3, #20]
    PORT->Group[PORTA].OUTCLR.reg  = (uint32_t)(1 << 17); // PA17 //  0 13 pinwrite  // D13
    21dc:	615a      	str	r2, [r3, #20]
}
    21de:	4770      	bx	lr
    21e0:	41004400 	.word	0x41004400

000021e4 <toggle_d11>:

void toggle_d11(void) {
    PORT->Group[PORTA].OUTTGL.reg  = (uint32_t)(1 << 16); // PA16 //    11 pintoggle // D11
    21e4:	2280      	movs	r2, #128	; 0x80
    21e6:	4b02      	ldr	r3, [pc, #8]	; (21f0 <toggle_d11+0xc>)
    21e8:	0252      	lsls	r2, r2, #9
    21ea:	61da      	str	r2, [r3, #28]
}
    21ec:	4770      	bx	lr
    21ee:	46c0      	nop			; (mov r8, r8)
    21f0:	41004400 	.word	0x41004400

000021f4 <main>:
#include <atmel_start.h>
#include "pins.h"

int main(void)
{
    21f4:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
        pins_setup();
    21f6:	4b02      	ldr	r3, [pc, #8]	; (2200 <main+0xc>)
    21f8:	4798      	blx	r3

	/* Replace with your application code */
	while (1) {
            toggle_d11();
    21fa:	4b02      	ldr	r3, [pc, #8]	; (2204 <main+0x10>)
    21fc:	e7fc      	b.n	21f8 <main+0x4>
    21fe:	46c0      	nop			; (mov r8, r8)
    2200:	000021bd 	.word	0x000021bd
    2204:	000021e5 	.word	0x000021e5

00002208 <__libc_init_array>:
    2208:	b570      	push	{r4, r5, r6, lr}
    220a:	2600      	movs	r6, #0
    220c:	4d0c      	ldr	r5, [pc, #48]	; (2240 <__libc_init_array+0x38>)
    220e:	4c0d      	ldr	r4, [pc, #52]	; (2244 <__libc_init_array+0x3c>)
    2210:	1b64      	subs	r4, r4, r5
    2212:	10a4      	asrs	r4, r4, #2
    2214:	42a6      	cmp	r6, r4
    2216:	d109      	bne.n	222c <__libc_init_array+0x24>
    2218:	2600      	movs	r6, #0
    221a:	f000 f819 	bl	2250 <_init>
    221e:	4d0a      	ldr	r5, [pc, #40]	; (2248 <__libc_init_array+0x40>)
    2220:	4c0a      	ldr	r4, [pc, #40]	; (224c <__libc_init_array+0x44>)
    2222:	1b64      	subs	r4, r4, r5
    2224:	10a4      	asrs	r4, r4, #2
    2226:	42a6      	cmp	r6, r4
    2228:	d105      	bne.n	2236 <__libc_init_array+0x2e>
    222a:	bd70      	pop	{r4, r5, r6, pc}
    222c:	00b3      	lsls	r3, r6, #2
    222e:	58eb      	ldr	r3, [r5, r3]
    2230:	4798      	blx	r3
    2232:	3601      	adds	r6, #1
    2234:	e7ee      	b.n	2214 <__libc_init_array+0xc>
    2236:	00b3      	lsls	r3, r6, #2
    2238:	58eb      	ldr	r3, [r5, r3]
    223a:	4798      	blx	r3
    223c:	3601      	adds	r6, #1
    223e:	e7f2      	b.n	2226 <__libc_init_array+0x1e>
    2240:	0000225c 	.word	0x0000225c
    2244:	0000225c 	.word	0x0000225c
    2248:	0000225c 	.word	0x0000225c
    224c:	00002260 	.word	0x00002260

00002250 <_init>:
    2250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2252:	46c0      	nop			; (mov r8, r8)
    2254:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2256:	bc08      	pop	{r3}
    2258:	469e      	mov	lr, r3
    225a:	4770      	bx	lr

0000225c <__init_array_start>:
    225c:	000020dd 	.word	0x000020dd

00002260 <_fini>:
    2260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2262:	46c0      	nop			; (mov r8, r8)
    2264:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2266:	bc08      	pop	{r3}
    2268:	469e      	mov	lr, r3
    226a:	4770      	bx	lr

0000226c <__fini_array_start>:
    226c:	000020b5 	.word	0x000020b5
