
AtmelStart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007fc  00002000  00002000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  000027fc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  20000004  00002800  00010004  2**2
                  ALLOC
  3 .stack        00002004  2000002c  00002828  00010004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010004  2**0
                  CONTENTS, READONLY
  5 .comment      0000007f  00000000  00000000  0001002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00018f58  00000000  00000000  000100ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d8d  00000000  00000000  00029003  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000060b9  00000000  00000000  0002ad90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000798  00000000  00000000  00030e49  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000015c8  00000000  00000000  000315e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00015d61  00000000  00000000  00032ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000091af  00000000  00000000  0004890a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00078ad1  00000000  00000000  00051ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001480  00000000  00000000  000ca58c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <exception_table>:
    2000:	30 20 00 20 31 21 00 00 2d 21 00 00 2d 21 00 00     0 . 1!..-!..-!..
	...
    202c:	2d 21 00 00 00 00 00 00 00 00 00 00 2d 21 00 00     -!..........-!..
    203c:	2d 21 00 00 2d 21 00 00 2d 21 00 00 2d 21 00 00     -!..-!..-!..-!..
    204c:	2d 21 00 00 2d 21 00 00 2d 21 00 00 2d 21 00 00     -!..-!..-!..-!..
    205c:	2d 21 00 00 2d 21 00 00 2d 21 00 00 2d 21 00 00     -!..-!..-!..-!..
    206c:	2d 21 00 00 2d 21 00 00 2d 21 00 00 2d 21 00 00     -!..-!..-!..-!..
    207c:	2d 21 00 00 2d 21 00 00 2d 21 00 00 2d 21 00 00     -!..-!..-!..-!..
    208c:	2d 21 00 00 2d 21 00 00 00 00 00 00 00 00 00 00     -!..-!..........
    209c:	2d 21 00 00 2d 21 00 00 2d 21 00 00 2d 21 00 00     -!..-!..-!..-!..
    20ac:	2d 21 00 00 00 00 00 00                             -!......

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	20000004 	.word	0x20000004
    20d4:	00000000 	.word	0x00000000
    20d8:	000027fc 	.word	0x000027fc

000020dc <frame_dummy>:
    20dc:	4b04      	ldr	r3, [pc, #16]	; (20f0 <frame_dummy+0x14>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4903      	ldr	r1, [pc, #12]	; (20f4 <frame_dummy+0x18>)
    20e6:	4804      	ldr	r0, [pc, #16]	; (20f8 <frame_dummy+0x1c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	bd10      	pop	{r4, pc}
    20ee:	46c0      	nop			; (mov r8, r8)
    20f0:	00000000 	.word	0x00000000
    20f4:	20000008 	.word	0x20000008
    20f8:	000027fc 	.word	0x000027fc

000020fc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    20fc:	b570      	push	{r4, r5, r6, lr}
    20fe:	0004      	movs	r4, r0
    2100:	000d      	movs	r5, r1
    2102:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
    2104:	2800      	cmp	r0, #0
    2106:	d002      	beq.n	210e <io_write+0x12>
    2108:	0008      	movs	r0, r1
    210a:	1e43      	subs	r3, r0, #1
    210c:	4198      	sbcs	r0, r3
    210e:	2234      	movs	r2, #52	; 0x34
    2110:	4904      	ldr	r1, [pc, #16]	; (2124 <io_write+0x28>)
    2112:	4b05      	ldr	r3, [pc, #20]	; (2128 <io_write+0x2c>)
    2114:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    2116:	0032      	movs	r2, r6
    2118:	0029      	movs	r1, r5
    211a:	6823      	ldr	r3, [r4, #0]
    211c:	0020      	movs	r0, r4
    211e:	4798      	blx	r3
}
    2120:	bd70      	pop	{r4, r5, r6, pc}
    2122:	46c0      	nop			; (mov r8, r8)
    2124:	00002784 	.word	0x00002784
    2128:	00002245 	.word	0x00002245

0000212c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    212c:	e7fe      	b.n	212c <Dummy_Handler>
	...

00002130 <Reset_Handler>:
	if (pSrc != pDest) {
    2130:	4821      	ldr	r0, [pc, #132]	; (21b8 <Reset_Handler+0x88>)
    2132:	4922      	ldr	r1, [pc, #136]	; (21bc <Reset_Handler+0x8c>)
{
    2134:	b570      	push	{r4, r5, r6, lr}
    2136:	2300      	movs	r3, #0
	if (pSrc != pDest) {
    2138:	4288      	cmp	r0, r1
    213a:	d135      	bne.n	21a8 <Reset_Handler+0x78>
		*pDest++ = 0;
    213c:	2100      	movs	r1, #0
    213e:	4b20      	ldr	r3, [pc, #128]	; (21c0 <Reset_Handler+0x90>)
	for (pDest = &_szero; pDest < &_ezero;) {
    2140:	4a20      	ldr	r2, [pc, #128]	; (21c4 <Reset_Handler+0x94>)
    2142:	4293      	cmp	r3, r2
    2144:	d335      	bcc.n	21b2 <Reset_Handler+0x82>
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
    2146:	22ff      	movs	r2, #255	; 0xff
    2148:	4b1f      	ldr	r3, [pc, #124]	; (21c8 <Reset_Handler+0x98>)
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    214a:	2103      	movs	r1, #3
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
    214c:	4393      	bics	r3, r2
    214e:	4a1f      	ldr	r2, [pc, #124]	; (21cc <Reset_Handler+0x9c>)
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2150:	250c      	movs	r5, #12
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
    2152:	6093      	str	r3, [r2, #8]
	SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2154:	2202      	movs	r2, #2
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2156:	2408      	movs	r4, #8
	DMAC->QOSCTRL.bit.DQOS   = 2;
    2158:	2630      	movs	r6, #48	; 0x30
	SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    215a:	4b1d      	ldr	r3, [pc, #116]	; (21d0 <Reset_Handler+0xa0>)
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    215c:	481d      	ldr	r0, [pc, #116]	; (21d4 <Reset_Handler+0xa4>)
	SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    215e:	625a      	str	r2, [r3, #36]	; 0x24
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2160:	78c3      	ldrb	r3, [r0, #3]
    2162:	438b      	bics	r3, r1
    2164:	4313      	orrs	r3, r2
    2166:	70c3      	strb	r3, [r0, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2168:	78c3      	ldrb	r3, [r0, #3]
    216a:	43ab      	bics	r3, r5
    216c:	4323      	orrs	r3, r4
    216e:	70c3      	strb	r3, [r0, #3]
	DMAC->QOSCTRL.bit.DQOS   = 2;
    2170:	4b19      	ldr	r3, [pc, #100]	; (21d8 <Reset_Handler+0xa8>)
    2172:	7b98      	ldrb	r0, [r3, #14]
    2174:	43b0      	bics	r0, r6
    2176:	0006      	movs	r6, r0
    2178:	2020      	movs	r0, #32
    217a:	4330      	orrs	r0, r6
    217c:	7398      	strb	r0, [r3, #14]
	DMAC->QOSCTRL.bit.FQOS   = 2;
    217e:	7b98      	ldrb	r0, [r3, #14]
    2180:	43a8      	bics	r0, r5
    2182:	4304      	orrs	r4, r0
    2184:	739c      	strb	r4, [r3, #14]
	DMAC->QOSCTRL.bit.WRBQOS = 2;
    2186:	7b98      	ldrb	r0, [r3, #14]
    2188:	4388      	bics	r0, r1
    218a:	4302      	orrs	r2, r0
    218c:	739a      	strb	r2, [r3, #14]
	NVMCTRL->CTRLB.bit.MANW = 1;
    218e:	2380      	movs	r3, #128	; 0x80
    2190:	4a12      	ldr	r2, [pc, #72]	; (21dc <Reset_Handler+0xac>)
    2192:	6851      	ldr	r1, [r2, #4]
    2194:	430b      	orrs	r3, r1
    2196:	6053      	str	r3, [r2, #4]
	__libc_init_array();
    2198:	4b11      	ldr	r3, [pc, #68]	; (21e0 <Reset_Handler+0xb0>)
    219a:	4798      	blx	r3
	main();
    219c:	4b11      	ldr	r3, [pc, #68]	; (21e4 <Reset_Handler+0xb4>)
    219e:	4798      	blx	r3
    21a0:	e7fe      	b.n	21a0 <Reset_Handler+0x70>
			*pDest++ = *pSrc++;
    21a2:	58c4      	ldr	r4, [r0, r3]
    21a4:	3304      	adds	r3, #4
    21a6:	6014      	str	r4, [r2, #0]
		for (; pDest < &_erelocate;) {
    21a8:	4c0f      	ldr	r4, [pc, #60]	; (21e8 <Reset_Handler+0xb8>)
    21aa:	18ca      	adds	r2, r1, r3
    21ac:	42a2      	cmp	r2, r4
    21ae:	d3f8      	bcc.n	21a2 <Reset_Handler+0x72>
    21b0:	e7c4      	b.n	213c <Reset_Handler+0xc>
		*pDest++ = 0;
    21b2:	c302      	stmia	r3!, {r1}
    21b4:	e7c5      	b.n	2142 <Reset_Handler+0x12>
    21b6:	46c0      	nop			; (mov r8, r8)
    21b8:	000027fc 	.word	0x000027fc
    21bc:	20000000 	.word	0x20000000
    21c0:	20000004 	.word	0x20000004
    21c4:	2000002c 	.word	0x2000002c
    21c8:	00002000 	.word	0x00002000
    21cc:	e000ed00 	.word	0xe000ed00
    21d0:	410070fc 	.word	0x410070fc
    21d4:	41005000 	.word	0x41005000
    21d8:	41004800 	.word	0x41004800
    21dc:	41004000 	.word	0x41004000
    21e0:	0000273d 	.word	0x0000273d
    21e4:	00002709 	.word	0x00002709
    21e8:	20000004 	.word	0x20000004

000021ec <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    21ec:	4b06      	ldr	r3, [pc, #24]	; (2208 <_pm_init+0x1c>)
    21ee:	7a1a      	ldrb	r2, [r3, #8]
    21f0:	b2d2      	uxtb	r2, r2
    21f2:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    21f4:	7a5a      	ldrb	r2, [r3, #9]
    21f6:	b2d2      	uxtb	r2, r2
    21f8:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    21fa:	7a9a      	ldrb	r2, [r3, #10]
    21fc:	b2d2      	uxtb	r2, r2
    21fe:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    2200:	7ada      	ldrb	r2, [r3, #11]
    2202:	b2d2      	uxtb	r2, r2
    2204:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    2206:	4770      	bx	lr
    2208:	40000400 	.word	0x40000400

0000220c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    220c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    220e:	2408      	movs	r4, #8
    2210:	4a07      	ldr	r2, [pc, #28]	; (2230 <_init_chip+0x24>)
    2212:	6853      	ldr	r3, [r2, #4]
    2214:	4323      	orrs	r3, r4
    2216:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    2218:	4b06      	ldr	r3, [pc, #24]	; (2234 <_init_chip+0x28>)
    221a:	4798      	blx	r3
	_sysctrl_init_sources();
    221c:	4b06      	ldr	r3, [pc, #24]	; (2238 <_init_chip+0x2c>)
    221e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    2220:	0020      	movs	r0, r4
    2222:	4c06      	ldr	r4, [pc, #24]	; (223c <_init_chip+0x30>)
    2224:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
    2226:	4b06      	ldr	r3, [pc, #24]	; (2240 <_init_chip+0x34>)
    2228:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    222a:	20f7      	movs	r0, #247	; 0xf7
    222c:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    222e:	bd10      	pop	{r4, pc}
    2230:	41004000 	.word	0x41004000
    2234:	000021ed 	.word	0x000021ed
    2238:	0000224d 	.word	0x0000224d
    223c:	00002401 	.word	0x00002401
    2240:	000022a9 	.word	0x000022a9

00002244 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    2244:	2800      	cmp	r0, #0
    2246:	d100      	bne.n	224a <assert+0x6>
		__asm("BKPT #0");
    2248:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    224a:	4770      	bx	lr

0000224c <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    224c:	4a13      	ldr	r2, [pc, #76]	; (229c <_sysctrl_init_sources+0x50>)
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    224e:	4814      	ldr	r0, [pc, #80]	; (22a0 <_sysctrl_init_sources+0x54>)
    2250:	6a13      	ldr	r3, [r2, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    2252:	6a11      	ldr	r1, [r2, #32]
    2254:	4003      	ands	r3, r0
	hri_sysctrl_write_OSC8M_reg(hw,
    2256:	2002      	movs	r0, #2
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    2258:	0f89      	lsrs	r1, r1, #30
    225a:	0789      	lsls	r1, r1, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    225c:	4301      	orrs	r1, r0
    225e:	430b      	orrs	r3, r1
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
    2260:	2106      	movs	r1, #6
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    2262:	6213      	str	r3, [r2, #32]
	calib = (*((uint32_t *)0x00806024) & 0x0001FC0) >> 6;
    2264:	4b0f      	ldr	r3, [pc, #60]	; (22a4 <_sysctrl_init_sources+0x58>)
    2266:	681b      	ldr	r3, [r3, #0]
    2268:	04db      	lsls	r3, r3, #19
    226a:	0e5b      	lsrs	r3, r3, #25
	    SYSCTRL_OSC32K_CALIB(calib) |
    226c:	0418      	lsls	r0, r3, #16
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
    226e:	4301      	orrs	r1, r0
	((Sysctrl *)hw)->OSC32K.reg = data;
    2270:	6191      	str	r1, [r2, #24]
	/* Enable OSC32K anyway since GCLK configuration may need it to sync */
	hri_sysctrl_set_OSC32K_ENABLE_bit(hw);
#endif

#if CONF_OSCULP32K_CONFIG == 1
	hri_sysctrl_write_OSCULP32K_reg(hw,
    2272:	211f      	movs	r1, #31
    2274:	400b      	ands	r3, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    2276:	7713      	strb	r3, [r2, #28]
    2278:	0013      	movs	r3, r2
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    227a:	2204      	movs	r2, #4
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    227c:	68d9      	ldr	r1, [r3, #12]
    227e:	4211      	tst	r1, r2
    2280:	d0fc      	beq.n	227c <_sysctrl_init_sources+0x30>
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ONDEMAND;
    2282:	2280      	movs	r2, #128	; 0x80
    2284:	6999      	ldr	r1, [r3, #24]
    2286:	430a      	orrs	r2, r1
    2288:	619a      	str	r2, [r3, #24]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    228a:	2208      	movs	r2, #8
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    228c:	68d9      	ldr	r1, [r3, #12]
    228e:	4211      	tst	r1, r2
    2290:	d0fc      	beq.n	228c <_sysctrl_init_sources+0x40>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    2292:	2280      	movs	r2, #128	; 0x80
    2294:	6a19      	ldr	r1, [r3, #32]
    2296:	430a      	orrs	r2, r1
    2298:	621a      	str	r2, [r3, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    229a:	4770      	bx	lr
    229c:	40000800 	.word	0x40000800
    22a0:	0fff0000 	.word	0x0fff0000
    22a4:	00806024 	.word	0x00806024

000022a8 <_sysctrl_init_referenced_generators>:
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    22a8:	4770      	bx	lr
	...

000022ac <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    22ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22ae:	0004      	movs	r4, r0
    22b0:	000e      	movs	r6, r1
    22b2:	0017      	movs	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    22b4:	2800      	cmp	r0, #0
    22b6:	d004      	beq.n	22c2 <usart_sync_write+0x16>
    22b8:	1e08      	subs	r0, r1, #0
    22ba:	d002      	beq.n	22c2 <usart_sync_write+0x16>
    22bc:	0010      	movs	r0, r2
    22be:	1e43      	subs	r3, r0, #1
    22c0:	4198      	sbcs	r0, r3
    22c2:	22f1      	movs	r2, #241	; 0xf1
    22c4:	490e      	ldr	r1, [pc, #56]	; (2300 <usart_sync_write+0x54>)
    22c6:	4b0f      	ldr	r3, [pc, #60]	; (2304 <usart_sync_write+0x58>)
    22c8:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    22ca:	0025      	movs	r5, r4
    22cc:	3508      	adds	r5, #8
    22ce:	0028      	movs	r0, r5
    22d0:	4b0d      	ldr	r3, [pc, #52]	; (2308 <usart_sync_write+0x5c>)
    22d2:	4798      	blx	r3
    22d4:	2800      	cmp	r0, #0
    22d6:	d0f8      	beq.n	22ca <usart_sync_write+0x1e>
	uint32_t                      offset = 0;
    22d8:	2400      	movs	r4, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    22da:	5d31      	ldrb	r1, [r6, r4]
    22dc:	0028      	movs	r0, r5
    22de:	4b0b      	ldr	r3, [pc, #44]	; (230c <usart_sync_write+0x60>)
    22e0:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
    22e2:	0028      	movs	r0, r5
    22e4:	4b08      	ldr	r3, [pc, #32]	; (2308 <usart_sync_write+0x5c>)
    22e6:	4798      	blx	r3
    22e8:	2800      	cmp	r0, #0
    22ea:	d0fa      	beq.n	22e2 <usart_sync_write+0x36>
			;
	} while (++offset < length);
    22ec:	3401      	adds	r4, #1
    22ee:	42a7      	cmp	r7, r4
    22f0:	d8f3      	bhi.n	22da <usart_sync_write+0x2e>
	while (!_usart_sync_is_transmit_done(&descr->device))
    22f2:	0028      	movs	r0, r5
    22f4:	4b06      	ldr	r3, [pc, #24]	; (2310 <usart_sync_write+0x64>)
    22f6:	4798      	blx	r3
    22f8:	2800      	cmp	r0, #0
    22fa:	d0fa      	beq.n	22f2 <usart_sync_write+0x46>
		;
	return (int32_t)offset;
}
    22fc:	0020      	movs	r0, r4
    22fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2300:	00002798 	.word	0x00002798
    2304:	00002245 	.word	0x00002245
    2308:	00002669 	.word	0x00002669
    230c:	00002659 	.word	0x00002659
    2310:	00002673 	.word	0x00002673

00002314 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    2314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2316:	0006      	movs	r6, r0
    2318:	000d      	movs	r5, r1
    231a:	9201      	str	r2, [sp, #4]
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    231c:	2800      	cmp	r0, #0
    231e:	d004      	beq.n	232a <usart_sync_read+0x16>
    2320:	1e08      	subs	r0, r1, #0
    2322:	d002      	beq.n	232a <usart_sync_read+0x16>
    2324:	0010      	movs	r0, r2
    2326:	1e43      	subs	r3, r0, #1
    2328:	4198      	sbcs	r0, r3
    232a:	2286      	movs	r2, #134	; 0x86
    232c:	490a      	ldr	r1, [pc, #40]	; (2358 <usart_sync_read+0x44>)
    232e:	0052      	lsls	r2, r2, #1
    2330:	4b0a      	ldr	r3, [pc, #40]	; (235c <usart_sync_read+0x48>)
    2332:	4798      	blx	r3
	uint32_t                      offset = 0;
    2334:	2400      	movs	r4, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    2336:	0037      	movs	r7, r6
    2338:	3708      	adds	r7, #8
    233a:	0038      	movs	r0, r7
    233c:	4b08      	ldr	r3, [pc, #32]	; (2360 <usart_sync_read+0x4c>)
    233e:	4798      	blx	r3
    2340:	2800      	cmp	r0, #0
    2342:	d0f8      	beq.n	2336 <usart_sync_read+0x22>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    2344:	4b07      	ldr	r3, [pc, #28]	; (2364 <usart_sync_read+0x50>)
    2346:	0038      	movs	r0, r7
    2348:	4798      	blx	r3
	} while (++offset < length);
    234a:	9b01      	ldr	r3, [sp, #4]
		buf[offset] = _usart_sync_read_byte(&descr->device);
    234c:	5528      	strb	r0, [r5, r4]
	} while (++offset < length);
    234e:	3401      	adds	r4, #1
    2350:	42a3      	cmp	r3, r4
    2352:	d8f0      	bhi.n	2336 <usart_sync_read+0x22>

	return (int32_t)offset;
}
    2354:	0020      	movs	r0, r4
    2356:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2358:	00002798 	.word	0x00002798
    235c:	00002245 	.word	0x00002245
    2360:	0000267d 	.word	0x0000267d
    2364:	00002661 	.word	0x00002661

00002368 <usart_sync_init>:
{
    2368:	b570      	push	{r4, r5, r6, lr}
    236a:	0004      	movs	r4, r0
    236c:	000d      	movs	r5, r1
	ASSERT(descr && hw);
    236e:	2800      	cmp	r0, #0
    2370:	d002      	beq.n	2378 <usart_sync_init+0x10>
    2372:	0008      	movs	r0, r1
    2374:	1e43      	subs	r3, r0, #1
    2376:	4198      	sbcs	r0, r3
    2378:	4907      	ldr	r1, [pc, #28]	; (2398 <usart_sync_init+0x30>)
    237a:	4b08      	ldr	r3, [pc, #32]	; (239c <usart_sync_init+0x34>)
    237c:	2234      	movs	r2, #52	; 0x34
    237e:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    2380:	0020      	movs	r0, r4
    2382:	0029      	movs	r1, r5
    2384:	3008      	adds	r0, #8
    2386:	4b06      	ldr	r3, [pc, #24]	; (23a0 <usart_sync_init+0x38>)
    2388:	4798      	blx	r3
	if (init_status) {
    238a:	2800      	cmp	r0, #0
    238c:	d103      	bne.n	2396 <usart_sync_init+0x2e>
	descr->io.read  = usart_sync_read;
    238e:	4b05      	ldr	r3, [pc, #20]	; (23a4 <usart_sync_init+0x3c>)
    2390:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
    2392:	4b05      	ldr	r3, [pc, #20]	; (23a8 <usart_sync_init+0x40>)
    2394:	6023      	str	r3, [r4, #0]
}
    2396:	bd70      	pop	{r4, r5, r6, pc}
    2398:	00002798 	.word	0x00002798
    239c:	00002245 	.word	0x00002245
    23a0:	00002611 	.word	0x00002611
    23a4:	00002315 	.word	0x00002315
    23a8:	000022ad 	.word	0x000022ad

000023ac <usart_sync_enable>:
{
    23ac:	b510      	push	{r4, lr}
    23ae:	0004      	movs	r4, r0
	ASSERT(descr);
    23b0:	1e43      	subs	r3, r0, #1
    23b2:	4198      	sbcs	r0, r3
    23b4:	2253      	movs	r2, #83	; 0x53
    23b6:	4905      	ldr	r1, [pc, #20]	; (23cc <usart_sync_enable+0x20>)
    23b8:	b2c0      	uxtb	r0, r0
    23ba:	4b05      	ldr	r3, [pc, #20]	; (23d0 <usart_sync_enable+0x24>)
    23bc:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    23be:	0020      	movs	r0, r4
    23c0:	4b04      	ldr	r3, [pc, #16]	; (23d4 <usart_sync_enable+0x28>)
    23c2:	3008      	adds	r0, #8
    23c4:	4798      	blx	r3
}
    23c6:	2000      	movs	r0, #0
    23c8:	bd10      	pop	{r4, pc}
    23ca:	46c0      	nop			; (mov r8, r8)
    23cc:	00002798 	.word	0x00002798
    23d0:	00002245 	.word	0x00002245
    23d4:	0000263d 	.word	0x0000263d

000023d8 <usart_sync_get_io_descriptor>:
{
    23d8:	b570      	push	{r4, r5, r6, lr}
    23da:	0004      	movs	r4, r0
    23dc:	000d      	movs	r5, r1
	ASSERT(descr && io);
    23de:	2800      	cmp	r0, #0
    23e0:	d002      	beq.n	23e8 <usart_sync_get_io_descriptor+0x10>
    23e2:	0008      	movs	r0, r1
    23e4:	1e43      	subs	r3, r0, #1
    23e6:	4198      	sbcs	r0, r3
    23e8:	2269      	movs	r2, #105	; 0x69
    23ea:	4903      	ldr	r1, [pc, #12]	; (23f8 <usart_sync_get_io_descriptor+0x20>)
    23ec:	4b03      	ldr	r3, [pc, #12]	; (23fc <usart_sync_get_io_descriptor+0x24>)
    23ee:	4798      	blx	r3
	*io = &descr->io;
    23f0:	602c      	str	r4, [r5, #0]
}
    23f2:	2000      	movs	r0, #0
    23f4:	bd70      	pop	{r4, r5, r6, pc}
    23f6:	46c0      	nop			; (mov r8, r8)
    23f8:	00002798 	.word	0x00002798
    23fc:	00002245 	.word	0x00002245

00002400 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    2400:	07c3      	lsls	r3, r0, #31
    2402:	d509      	bpl.n	2418 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    2404:	2280      	movs	r2, #128	; 0x80
    2406:	4b0a      	ldr	r3, [pc, #40]	; (2430 <_gclk_init_generators_by_fref+0x30>)
    2408:	0052      	lsls	r2, r2, #1
    240a:	609a      	str	r2, [r3, #8]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    240c:	785a      	ldrb	r2, [r3, #1]
    240e:	09d2      	lsrs	r2, r2, #7
    2410:	d1fc      	bne.n	240c <_gclk_init_generators_by_fref+0xc>
	((Gclk *)hw)->GENCTRL.reg = data;
    2412:	2283      	movs	r2, #131	; 0x83
    2414:	0252      	lsls	r2, r2, #9
    2416:	605a      	str	r2, [r3, #4]
		        | (CONF_GCLK_GEN_2_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_2_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GEN_2_GENEN << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif
#if CONF_GCLK_GEN_3_GENEN == 1
	if (bm & (1ul << 3)) {
    2418:	0703      	lsls	r3, r0, #28
    241a:	d508      	bpl.n	242e <_gclk_init_generators_by_fref+0x2e>
	((Gclk *)hw)->GENDIV.reg = data;
    241c:	2204      	movs	r2, #4
    241e:	4b04      	ldr	r3, [pc, #16]	; (2430 <_gclk_init_generators_by_fref+0x30>)
    2420:	32ff      	adds	r2, #255	; 0xff
    2422:	609a      	str	r2, [r3, #8]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    2424:	785a      	ldrb	r2, [r3, #1]
    2426:	09d2      	lsrs	r2, r2, #7
    2428:	d1fc      	bne.n	2424 <_gclk_init_generators_by_fref+0x24>
	((Gclk *)hw)->GENCTRL.reg = data;
    242a:	4a02      	ldr	r2, [pc, #8]	; (2434 <_gclk_init_generators_by_fref+0x34>)
    242c:	605a      	str	r2, [r3, #4]
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    242e:	4770      	bx	lr
    2430:	40000c00 	.word	0x40000c00
    2434:	00010403 	.word	0x00010403

00002438 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
    2438:	4b01      	ldr	r3, [pc, #4]	; (2440 <SystemInit+0x8>)
    243a:	4a02      	ldr	r2, [pc, #8]	; (2444 <SystemInit+0xc>)
    243c:	601a      	str	r2, [r3, #0]
	return;
}
    243e:	4770      	bx	lr
    2440:	20000000 	.word	0x20000000
    2444:	000f4240 	.word	0x000f4240

00002448 <USART_0_example>:

/**
 * Example of using USART_0 to write "Hello World" using the IO abstraction.
 */
void USART_0_example(void)
{
    2448:	b513      	push	{r0, r1, r4, lr}
	struct io_descriptor *io;
	usart_sync_get_io_descriptor(&USART_0, &io);
    244a:	4c07      	ldr	r4, [pc, #28]	; (2468 <USART_0_example+0x20>)
    244c:	a901      	add	r1, sp, #4
    244e:	0020      	movs	r0, r4
    2450:	4b06      	ldr	r3, [pc, #24]	; (246c <USART_0_example+0x24>)
    2452:	4798      	blx	r3
	usart_sync_enable(&USART_0);
    2454:	0020      	movs	r0, r4
    2456:	4b06      	ldr	r3, [pc, #24]	; (2470 <USART_0_example+0x28>)
    2458:	4798      	blx	r3

	io_write(io, (uint8_t *)"Hello World!", 12);
    245a:	220c      	movs	r2, #12
    245c:	4905      	ldr	r1, [pc, #20]	; (2474 <USART_0_example+0x2c>)
    245e:	9801      	ldr	r0, [sp, #4]
    2460:	4b05      	ldr	r3, [pc, #20]	; (2478 <USART_0_example+0x30>)
    2462:	4798      	blx	r3
}
    2464:	bd13      	pop	{r0, r1, r4, pc}
    2466:	46c0      	nop			; (mov r8, r8)
    2468:	20000020 	.word	0x20000020
    246c:	000023d9 	.word	0x000023d9
    2470:	000023ad 	.word	0x000023ad
    2474:	000027b4 	.word	0x000027b4
    2478:	000020fd 	.word	0x000020fd

0000247c <USART_0_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    247c:	4b0d      	ldr	r3, [pc, #52]	; (24b4 <USART_0_PORT_init+0x38>)
	tmp &= ~PORT_PINCFG_PMUXEN;
    247e:	2201      	movs	r2, #1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2480:	0018      	movs	r0, r3
#include <hpl_pm_base.h>

struct usart_sync_descriptor USART_0;

void USART_0_PORT_init(void)
{
    2482:	b530      	push	{r4, r5, lr}
    2484:	30d6      	adds	r0, #214	; 0xd6
    2486:	7801      	ldrb	r1, [r0, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2488:	240f      	movs	r4, #15
	tmp &= ~PORT_PINCFG_PMUXEN;
    248a:	4391      	bics	r1, r2
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    248c:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    248e:	7001      	strb	r1, [r0, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2490:	0019      	movs	r1, r3
	tmp |= PORT_PMUX_PMUXE(data);
    2492:	2003      	movs	r0, #3
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2494:	31bb      	adds	r1, #187	; 0xbb
    2496:	780d      	ldrb	r5, [r1, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2498:	33d7      	adds	r3, #215	; 0xd7
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    249a:	43a5      	bics	r5, r4
	tmp |= PORT_PMUX_PMUXE(data);
    249c:	4328      	orrs	r0, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    249e:	7008      	strb	r0, [r1, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    24a0:	7818      	ldrb	r0, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    24a2:	4390      	bics	r0, r2
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    24a4:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    24a6:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    24a8:	780b      	ldrb	r3, [r1, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    24aa:	401c      	ands	r4, r3
	tmp |= PORT_PMUX_PMUXO(data);
    24ac:	2330      	movs	r3, #48	; 0x30
    24ae:	4323      	orrs	r3, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    24b0:	700b      	strb	r3, [r1, #0]

	gpio_set_pin_function(PB22, PINMUX_PB22D_SERCOM5_PAD2);

	gpio_set_pin_function(PB23, PINMUX_PB23D_SERCOM5_PAD3);
}
    24b2:	bd30      	pop	{r4, r5, pc}
    24b4:	41004400 	.word	0x41004400

000024b8 <USART_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
    24b8:	2380      	movs	r3, #128	; 0x80
    24ba:	4a04      	ldr	r2, [pc, #16]	; (24cc <USART_0_CLOCK_init+0x14>)
    24bc:	6a11      	ldr	r1, [r2, #32]
    24be:	430b      	orrs	r3, r1
    24c0:	6213      	str	r3, [r2, #32]
	((Gclk *)hw)->CLKCTRL.reg = data;
    24c2:	4b03      	ldr	r3, [pc, #12]	; (24d0 <USART_0_CLOCK_init+0x18>)
    24c4:	4a03      	ldr	r2, [pc, #12]	; (24d4 <USART_0_CLOCK_init+0x1c>)
    24c6:	805a      	strh	r2, [r3, #2]

void USART_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM5);
	_gclk_enable_channel(SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC);
}
    24c8:	4770      	bx	lr
    24ca:	46c0      	nop			; (mov r8, r8)
    24cc:	40000400 	.word	0x40000400
    24d0:	40000c00 	.word	0x40000c00
    24d4:	00004019 	.word	0x00004019

000024d8 <USART_0_init>:

void USART_0_init(void)
{
    24d8:	b510      	push	{r4, lr}
	USART_0_CLOCK_init();
    24da:	4b05      	ldr	r3, [pc, #20]	; (24f0 <USART_0_init+0x18>)
    24dc:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM5, (void *)NULL);
    24de:	2200      	movs	r2, #0
    24e0:	4904      	ldr	r1, [pc, #16]	; (24f4 <USART_0_init+0x1c>)
    24e2:	4b05      	ldr	r3, [pc, #20]	; (24f8 <USART_0_init+0x20>)
    24e4:	4805      	ldr	r0, [pc, #20]	; (24fc <USART_0_init+0x24>)
    24e6:	4798      	blx	r3
	USART_0_PORT_init();
    24e8:	4b05      	ldr	r3, [pc, #20]	; (2500 <USART_0_init+0x28>)
    24ea:	4798      	blx	r3
}
    24ec:	bd10      	pop	{r4, pc}
    24ee:	46c0      	nop			; (mov r8, r8)
    24f0:	000024b9 	.word	0x000024b9
    24f4:	42001c00 	.word	0x42001c00
    24f8:	00002369 	.word	0x00002369
    24fc:	20000020 	.word	0x20000020
    2500:	0000247d 	.word	0x0000247d

00002504 <system_init>:

void system_init(void)
{
    2504:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    2506:	4b11      	ldr	r3, [pc, #68]	; (254c <system_init+0x48>)
    2508:	4798      	blx	r3

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    250a:	2480      	movs	r4, #128	; 0x80
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    250c:	22c0      	movs	r2, #192	; 0xc0
    250e:	2180      	movs	r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2510:	4b0f      	ldr	r3, [pc, #60]	; (2550 <system_init+0x4c>)
    2512:	4810      	ldr	r0, [pc, #64]	; (2554 <system_init+0x50>)
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2514:	001d      	movs	r5, r3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2516:	05d2      	lsls	r2, r2, #23
    2518:	0249      	lsls	r1, r1, #9
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    251a:	05e4      	lsls	r4, r4, #23
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    251c:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    251e:	629c      	str	r4, [r3, #40]	; 0x28
    2520:	6298      	str	r0, [r3, #40]	; 0x28
	tmp &= ~PORT_PINCFG_PMUXEN;
    2522:	2001      	movs	r0, #1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2524:	6151      	str	r1, [r2, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2526:	3550      	adds	r5, #80	; 0x50
    2528:	7829      	ldrb	r1, [r5, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    252a:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    252c:	7029      	strb	r1, [r5, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    252e:	2180      	movs	r1, #128	; 0x80
    2530:	0289      	lsls	r1, r1, #10
    2532:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2534:	629c      	str	r4, [r3, #40]	; 0x28
    2536:	4c08      	ldr	r4, [pc, #32]	; (2558 <system_init+0x54>)
    2538:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    253a:	6151      	str	r1, [r2, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    253c:	3351      	adds	r3, #81	; 0x51
    253e:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2540:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2542:	701a      	strb	r2, [r3, #0]
	                   // <true"> High
	                   false);

	gpio_set_pin_function(PA17, GPIO_PIN_FUNCTION_OFF);

	USART_0_init();
    2544:	4b05      	ldr	r3, [pc, #20]	; (255c <system_init+0x58>)
    2546:	4798      	blx	r3
}
    2548:	bd70      	pop	{r4, r5, r6, pc}
    254a:	46c0      	nop			; (mov r8, r8)
    254c:	0000220d 	.word	0x0000220d
    2550:	41004400 	.word	0x41004400
    2554:	c0000001 	.word	0xc0000001
    2558:	c0000002 	.word	0xc0000002
    255c:	000024d9 	.word	0x000024d9

00002560 <hri_sercomusart_wait_for_sync>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2560:	69c3      	ldr	r3, [r0, #28]
    2562:	4219      	tst	r1, r3
    2564:	d1fc      	bne.n	2560 <hri_sercomusart_wait_for_sync>
	};
}
    2566:	4770      	bx	lr

00002568 <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    2568:	b510      	push	{r4, lr}
    256a:	0004      	movs	r4, r0
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    256c:	2103      	movs	r1, #3
    256e:	4b03      	ldr	r3, [pc, #12]	; (257c <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x14>)
    2570:	4798      	blx	r3
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2572:	2202      	movs	r2, #2
    2574:	6823      	ldr	r3, [r4, #0]
    2576:	4393      	bics	r3, r2
    2578:	6023      	str	r3, [r4, #0]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    257a:	bd10      	pop	{r4, pc}
    257c:	00002561 	.word	0x00002561

00002580 <_usart_init>:
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
		return 5;
	}
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    2580:	4b1b      	ldr	r3, [pc, #108]	; (25f0 <_usart_init+0x70>)
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    2582:	b570      	push	{r4, r5, r6, lr}
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    2584:	18c3      	adds	r3, r0, r3
    2586:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
    2588:	b2db      	uxtb	r3, r3
{
    258a:	0004      	movs	r4, r0
		if (_usarts[i].number == sercom_offset) {
    258c:	2b05      	cmp	r3, #5
    258e:	d004      	beq.n	259a <_usart_init+0x1a>
	ASSERT(false);
    2590:	4a18      	ldr	r2, [pc, #96]	; (25f4 <_usart_init+0x74>)
    2592:	4919      	ldr	r1, [pc, #100]	; (25f8 <_usart_init+0x78>)
    2594:	2000      	movs	r0, #0
    2596:	4b19      	ldr	r3, [pc, #100]	; (25fc <_usart_init+0x7c>)
    2598:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    259a:	69e3      	ldr	r3, [r4, #28]
    259c:	4d18      	ldr	r5, [pc, #96]	; (2600 <_usart_init+0x80>)
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    259e:	07db      	lsls	r3, r3, #31
    25a0:	d411      	bmi.n	25c6 <_usart_init+0x46>
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
	tmp &= mask;
    25a2:	2602      	movs	r6, #2
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    25a4:	2103      	movs	r1, #3
    25a6:	0020      	movs	r0, r4
    25a8:	47a8      	blx	r5
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    25aa:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    25ac:	4233      	tst	r3, r6
    25ae:	d005      	beq.n	25bc <_usart_init+0x3c>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    25b0:	0020      	movs	r0, r4
    25b2:	4b14      	ldr	r3, [pc, #80]	; (2604 <_usart_init+0x84>)
    25b4:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    25b6:	0031      	movs	r1, r6
    25b8:	0020      	movs	r0, r4
    25ba:	47a8      	blx	r5
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    25bc:	2103      	movs	r1, #3
    25be:	0020      	movs	r0, r4
    25c0:	47a8      	blx	r5
	((Sercom *)hw)->USART.CTRLA.reg = data;
    25c2:	2305      	movs	r3, #5
    25c4:	6023      	str	r3, [r4, #0]
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    25c6:	0020      	movs	r0, r4
    25c8:	2101      	movs	r1, #1
    25ca:	47a8      	blx	r5
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    25cc:	0020      	movs	r0, r4
    25ce:	2103      	movs	r1, #3
    25d0:	47a8      	blx	r5
	((Sercom *)hw)->USART.CTRLA.reg = data;
    25d2:	4b0d      	ldr	r3, [pc, #52]	; (2608 <_usart_init+0x88>)
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    25d4:	0020      	movs	r0, r4
	((Sercom *)hw)->USART.CTRLA.reg = data;
    25d6:	6023      	str	r3, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    25d8:	2107      	movs	r1, #7
    25da:	47a8      	blx	r5
	((Sercom *)hw)->USART.CTRLB.reg = data;
    25dc:	23c0      	movs	r3, #192	; 0xc0
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    25de:	2000      	movs	r0, #0
	((Sercom *)hw)->USART.CTRLB.reg = data;
    25e0:	029b      	lsls	r3, r3, #10
    25e2:	6063      	str	r3, [r4, #4]
	((Sercom *)hw)->USART.BAUD.reg = data;
    25e4:	4b09      	ldr	r3, [pc, #36]	; (260c <_usart_init+0x8c>)
    25e6:	81a3      	strh	r3, [r4, #12]
	((Sercom *)hw)->USART.RXPL.reg = data;
    25e8:	73a0      	strb	r0, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    25ea:	3430      	adds	r4, #48	; 0x30
    25ec:	7020      	strb	r0, [r4, #0]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
    25ee:	bd70      	pop	{r4, r5, r6, pc}
    25f0:	bdfff800 	.word	0xbdfff800
    25f4:	00000241 	.word	0x00000241
    25f8:	000027c1 	.word	0x000027c1
    25fc:	00002245 	.word	0x00002245
    2600:	00002561 	.word	0x00002561
    2604:	00002569 	.word	0x00002569
    2608:	40310004 	.word	0x40310004
    260c:	ffffec56 	.word	0xffffec56

00002610 <_usart_sync_init>:
{
    2610:	b570      	push	{r4, r5, r6, lr}
    2612:	0005      	movs	r5, r0
	ASSERT(device);
    2614:	1e43      	subs	r3, r0, #1
    2616:	4198      	sbcs	r0, r3
{
    2618:	000c      	movs	r4, r1
	ASSERT(device);
    261a:	22b4      	movs	r2, #180	; 0xb4
    261c:	4904      	ldr	r1, [pc, #16]	; (2630 <_usart_sync_init+0x20>)
    261e:	b2c0      	uxtb	r0, r0
    2620:	4b04      	ldr	r3, [pc, #16]	; (2634 <_usart_sync_init+0x24>)
    2622:	4798      	blx	r3
	device->hw = hw;
    2624:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    2626:	0020      	movs	r0, r4
    2628:	4b03      	ldr	r3, [pc, #12]	; (2638 <_usart_sync_init+0x28>)
    262a:	4798      	blx	r3
}
    262c:	bd70      	pop	{r4, r5, r6, pc}
    262e:	46c0      	nop			; (mov r8, r8)
    2630:	000027c1 	.word	0x000027c1
    2634:	00002245 	.word	0x00002245
    2638:	00002581 	.word	0x00002581

0000263c <_usart_sync_enable>:
{
    263c:	b510      	push	{r4, lr}
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    263e:	6804      	ldr	r4, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2640:	2103      	movs	r1, #3
    2642:	0020      	movs	r0, r4
    2644:	4b03      	ldr	r3, [pc, #12]	; (2654 <_usart_sync_enable+0x18>)
    2646:	4798      	blx	r3
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2648:	2302      	movs	r3, #2
    264a:	6822      	ldr	r2, [r4, #0]
    264c:	4313      	orrs	r3, r2
    264e:	6023      	str	r3, [r4, #0]
}
    2650:	bd10      	pop	{r4, pc}
    2652:	46c0      	nop			; (mov r8, r8)
    2654:	00002561 	.word	0x00002561

00002658 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    2658:	6803      	ldr	r3, [r0, #0]
    265a:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    265c:	8519      	strh	r1, [r3, #40]	; 0x28
}
    265e:	4770      	bx	lr

00002660 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    2660:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    2662:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    2664:	b2c0      	uxtb	r0, r0
}
    2666:	4770      	bx	lr

00002668 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    2668:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    266a:	7e18      	ldrb	r0, [r3, #24]
    266c:	2301      	movs	r3, #1
    266e:	4018      	ands	r0, r3
}
    2670:	4770      	bx	lr

00002672 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    2672:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    2674:	7e18      	ldrb	r0, [r3, #24]
    2676:	0780      	lsls	r0, r0, #30
    2678:	0fc0      	lsrs	r0, r0, #31
}
    267a:	4770      	bx	lr

0000267c <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    267c:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    267e:	7e18      	ldrb	r0, [r3, #24]
    2680:	0740      	lsls	r0, r0, #29
    2682:	0fc0      	lsrs	r0, r0, #31
}
    2684:	4770      	bx	lr
	...

00002688 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    2688:	b510      	push	{r4, lr}
	system_init();
    268a:	4b01      	ldr	r3, [pc, #4]	; (2690 <atmel_start_init+0x8>)
    268c:	4798      	blx	r3
}
    268e:	bd10      	pop	{r4, pc}
    2690:	00002505 	.word	0x00002505

00002694 <pins_setup>:
// Fri Aug 17 15:47:21 UTC 2018
#include "atmel_start.h"
#include "pins.h"

void pins_setup(void) {
    PORT->Group[PORTA].DIRSET.reg  = (uint32_t)(1 << 16); // PA16 //  1 11 pinmode   // D11
    2694:	2180      	movs	r1, #128	; 0x80
    PORT->Group[PORTA].DIRSET.reg  = (uint32_t)(1 << 17); // PA17 //  1 13 pinmode   // D13
    2696:	2280      	movs	r2, #128	; 0x80
    PORT->Group[PORTA].DIRSET.reg  = (uint32_t)(1 << 16); // PA16 //  1 11 pinmode   // D11
    2698:	4b07      	ldr	r3, [pc, #28]	; (26b8 <pins_setup+0x24>)
    269a:	0249      	lsls	r1, r1, #9
    PORT->Group[PORTA].DIRSET.reg  = (uint32_t)(1 << 17); // PA17 //  1 13 pinmode   // D13
    269c:	0292      	lsls	r2, r2, #10
    PORT->Group[PORTA].DIRSET.reg  = (uint32_t)(1 << 16); // PA16 //  1 11 pinmode   // D11
    269e:	6099      	str	r1, [r3, #8]
    PORT->Group[PORTA].DIRSET.reg  = (uint32_t)(1 << 17); // PA17 //  1 13 pinmode   // D13
    26a0:	609a      	str	r2, [r3, #8]

    PORT->Group[PORTA].OUTTGL.reg  = (uint32_t)(1 << 16); // PA16 //    11 pintoggle // D11
    26a2:	61d9      	str	r1, [r3, #28]
    PORT->Group[PORTA].OUTTGL.reg  = (uint32_t)(1 << 17); // PA17 //    13 pintoggle // D13
    26a4:	61da      	str	r2, [r3, #28]

    PORT->Group[PORTA].OUTSET.reg |= (uint32_t)(1 << 16); // PA16 //  1 11 pinwrite  // D11
    26a6:	6998      	ldr	r0, [r3, #24]
    26a8:	4308      	orrs	r0, r1
    26aa:	6198      	str	r0, [r3, #24]
    PORT->Group[PORTA].OUTSET.reg |= (uint32_t)(1 << 17); // PA17 //  1 13 pinwrite  // D13
    26ac:	6998      	ldr	r0, [r3, #24]
    26ae:	4310      	orrs	r0, r2
    26b0:	6198      	str	r0, [r3, #24]

    PORT->Group[PORTA].OUTCLR.reg  = (uint32_t)(1 << 16); // PA16 //  0 11 pinwrite  // D11
    26b2:	6159      	str	r1, [r3, #20]
    PORT->Group[PORTA].OUTCLR.reg  = (uint32_t)(1 << 17); // PA17 //  0 13 pinwrite  // D13
    26b4:	615a      	str	r2, [r3, #20]
}
    26b6:	4770      	bx	lr
    26b8:	41004400 	.word	0x41004400

000026bc <toggle_d11>:

void toggle_d11(void) {
    PORT->Group[PORTA].OUTTGL.reg  = (uint32_t)(1 << 16); // PA16 //    11 pintoggle // D11
    26bc:	2280      	movs	r2, #128	; 0x80
    26be:	4b02      	ldr	r3, [pc, #8]	; (26c8 <toggle_d11+0xc>)
    26c0:	0252      	lsls	r2, r2, #9
    26c2:	61da      	str	r2, [r3, #28]
}
    26c4:	4770      	bx	lr
    26c6:	46c0      	nop			; (mov r8, r8)
    26c8:	41004400 	.word	0x41004400

000026cc <waste>:
#include "pins.h"

#define WASTED_TIME 21040

void waste(void) { // time and resources
    for (volatile int i=(8 * WASTED_TIME); i>0; i--) {
    26cc:	4b05      	ldr	r3, [pc, #20]	; (26e4 <waste+0x18>)
void waste(void) { // time and resources
    26ce:	b082      	sub	sp, #8
    for (volatile int i=(8 * WASTED_TIME); i>0; i--) {
    26d0:	9301      	str	r3, [sp, #4]
    26d2:	9b01      	ldr	r3, [sp, #4]
    26d4:	2b00      	cmp	r3, #0
    26d6:	dc01      	bgt.n	26dc <waste+0x10>
    }
}
    26d8:	b002      	add	sp, #8
    26da:	4770      	bx	lr
    for (volatile int i=(8 * WASTED_TIME); i>0; i--) {
    26dc:	9b01      	ldr	r3, [sp, #4]
    26de:	3b01      	subs	r3, #1
    26e0:	e7f6      	b.n	26d0 <waste+0x4>
    26e2:	46c0      	nop			; (mov r8, r8)
    26e4:	00029180 	.word	0x00029180

000026e8 <blink>:

void blink(void) {
    26e8:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[PORTA].OUTTGL.reg  = (uint32_t)(1 << 17); // PA17 //    13 pintoggle // D13
    26ea:	2680      	movs	r6, #128	; 0x80
    26ec:	4d04      	ldr	r5, [pc, #16]	; (2700 <blink+0x18>)
    26ee:	02b6      	lsls	r6, r6, #10
    26f0:	61ee      	str	r6, [r5, #28]
    waste();
    26f2:	4c04      	ldr	r4, [pc, #16]	; (2704 <blink+0x1c>)
    26f4:	47a0      	blx	r4
    PORT->Group[PORTA].OUTTGL.reg  = (uint32_t)(1 << 17);
    26f6:	61ee      	str	r6, [r5, #28]
    waste(); waste();
    26f8:	47a0      	blx	r4
    26fa:	47a0      	blx	r4
}
    26fc:	bd70      	pop	{r4, r5, r6, pc}
    26fe:	46c0      	nop			; (mov r8, r8)
    2700:	41004400 	.word	0x41004400
    2704:	000026cd 	.word	0x000026cd

00002708 <main>:

int main(void) {
    2708:	b510      	push	{r4, lr}
    /* Initializes MCU, drivers and middleware */
    atmel_start_init();
    270a:	4b06      	ldr	r3, [pc, #24]	; (2724 <main+0x1c>)
    270c:	4798      	blx	r3
    SystemInit();
    270e:	4b06      	ldr	r3, [pc, #24]	; (2728 <main+0x20>)
    2710:	4798      	blx	r3
    pins_setup();
    2712:	4b06      	ldr	r3, [pc, #24]	; (272c <main+0x24>)
    2714:	4798      	blx	r3

    USART_0_example();
    2716:	4b06      	ldr	r3, [pc, #24]	; (2730 <main+0x28>)
    2718:	4798      	blx	r3

    /* Replace with your application code */
    while (1) {
        blink();
    271a:	4b06      	ldr	r3, [pc, #24]	; (2734 <main+0x2c>)
    271c:	4798      	blx	r3
        toggle_d11();
    271e:	4b06      	ldr	r3, [pc, #24]	; (2738 <main+0x30>)
    2720:	e7fa      	b.n	2718 <main+0x10>
    2722:	46c0      	nop			; (mov r8, r8)
    2724:	00002689 	.word	0x00002689
    2728:	00002439 	.word	0x00002439
    272c:	00002695 	.word	0x00002695
    2730:	00002449 	.word	0x00002449
    2734:	000026e9 	.word	0x000026e9
    2738:	000026bd 	.word	0x000026bd

0000273c <__libc_init_array>:
    273c:	b570      	push	{r4, r5, r6, lr}
    273e:	2600      	movs	r6, #0
    2740:	4d0c      	ldr	r5, [pc, #48]	; (2774 <__libc_init_array+0x38>)
    2742:	4c0d      	ldr	r4, [pc, #52]	; (2778 <__libc_init_array+0x3c>)
    2744:	1b64      	subs	r4, r4, r5
    2746:	10a4      	asrs	r4, r4, #2
    2748:	42a6      	cmp	r6, r4
    274a:	d109      	bne.n	2760 <__libc_init_array+0x24>
    274c:	2600      	movs	r6, #0
    274e:	f000 f845 	bl	27dc <_init>
    2752:	4d0a      	ldr	r5, [pc, #40]	; (277c <__libc_init_array+0x40>)
    2754:	4c0a      	ldr	r4, [pc, #40]	; (2780 <__libc_init_array+0x44>)
    2756:	1b64      	subs	r4, r4, r5
    2758:	10a4      	asrs	r4, r4, #2
    275a:	42a6      	cmp	r6, r4
    275c:	d105      	bne.n	276a <__libc_init_array+0x2e>
    275e:	bd70      	pop	{r4, r5, r6, pc}
    2760:	00b3      	lsls	r3, r6, #2
    2762:	58eb      	ldr	r3, [r5, r3]
    2764:	4798      	blx	r3
    2766:	3601      	adds	r6, #1
    2768:	e7ee      	b.n	2748 <__libc_init_array+0xc>
    276a:	00b3      	lsls	r3, r6, #2
    276c:	58eb      	ldr	r3, [r5, r3]
    276e:	4798      	blx	r3
    2770:	3601      	adds	r6, #1
    2772:	e7f2      	b.n	275a <__libc_init_array+0x1e>
    2774:	000027e8 	.word	0x000027e8
    2778:	000027e8 	.word	0x000027e8
    277c:	000027e8 	.word	0x000027e8
    2780:	000027ec 	.word	0x000027ec
    2784:	682f2e2e 	.word	0x682f2e2e
    2788:	732f6c61 	.word	0x732f6c61
    278c:	682f6372 	.word	0x682f6372
    2790:	695f6c61 	.word	0x695f6c61
    2794:	00632e6f 	.word	0x00632e6f
    2798:	682f2e2e 	.word	0x682f2e2e
    279c:	732f6c61 	.word	0x732f6c61
    27a0:	682f6372 	.word	0x682f6372
    27a4:	755f6c61 	.word	0x755f6c61
    27a8:	74726173 	.word	0x74726173
    27ac:	6e79735f 	.word	0x6e79735f
    27b0:	00632e63 	.word	0x00632e63
    27b4:	6c6c6548 	.word	0x6c6c6548
    27b8:	6f57206f 	.word	0x6f57206f
    27bc:	21646c72 	.word	0x21646c72
    27c0:	00          	.byte	0x00
    27c1:	2e          	.byte	0x2e
    27c2:	2f2e      	.short	0x2f2e
    27c4:	2f6c7068 	.word	0x2f6c7068
    27c8:	63726573 	.word	0x63726573
    27cc:	682f6d6f 	.word	0x682f6d6f
    27d0:	735f6c70 	.word	0x735f6c70
    27d4:	6f637265 	.word	0x6f637265
    27d8:	00632e6d 	.word	0x00632e6d

000027dc <_init>:
    27dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27de:	46c0      	nop			; (mov r8, r8)
    27e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    27e2:	bc08      	pop	{r3}
    27e4:	469e      	mov	lr, r3
    27e6:	4770      	bx	lr

000027e8 <__init_array_start>:
    27e8:	000020dd 	.word	0x000020dd

000027ec <_fini>:
    27ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27ee:	46c0      	nop			; (mov r8, r8)
    27f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    27f2:	bc08      	pop	{r3}
    27f4:	469e      	mov	lr, r3
    27f6:	4770      	bx	lr

000027f8 <__fini_array_start>:
    27f8:	000020b5 	.word	0x000020b5
